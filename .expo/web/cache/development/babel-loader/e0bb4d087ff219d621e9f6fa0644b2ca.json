{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Month } from 'react-native-month';\nimport moment from 'moment';\nimport { isValidDate, getMonthNames, isSameDate } from \"../../utils/date\";\nimport { shouldRenderMonth, isMonthDrawn } from \"./utils\";\nvar SHOULD_NOT_UPDATE = true;\nvar EmptyMonth = React.memo(function (props) {\n  return React.createElement(View, {\n    style: [{\n      height: props.height,\n      justifyContent: 'center',\n      alignItems: 'center'\n    }, props.theme.emptyMonthContainerStyle]\n  }, React.createElement(Text, {\n    style: [{\n      fontSize: 25,\n      fontWeight: '300'\n    }, props.theme.emptyMonthTextStyle],\n    allowFontScaling: false\n  }, props.name));\n}, function () {\n  return SHOULD_NOT_UPDATE;\n});\nvar MonthTitle = React.memo(function (props) {\n  return React.createElement(Text, {\n    allowFontScaling: false,\n    style: [{\n      textAlign: 'center',\n      paddingVertical: 10\n    }, props.theme.monthTitleTextStyle]\n  }, props.name);\n}, function () {\n  return SHOULD_NOT_UPDATE;\n});\nexport default React.memo(function (props) {\n  var month = props.month,\n      year = props.year,\n      minDate = props.minDate,\n      maxDate = props.maxDate,\n      showMonthTitle = props.showMonthTitle,\n      monthNames = props.monthNames,\n      _props$theme = props.theme,\n      theme = _props$theme === void 0 ? {} : _props$theme,\n      height = props.height,\n      locale = props.locale,\n      index = props.index;\n  var MONTH_NAMES = Array.isArray(monthNames) && monthNames.length === 12 ? monthNames : getMonthNames(locale);\n  var monthName = \"\".concat(MONTH_NAMES[month], \" \").concat(year);\n\n  if (index < props.firstViewableIndex - props.viewableRangeOffset || index > props.lastViewableIndex) {\n    return React.createElement(EmptyMonth, {\n      name: monthName,\n      height: height,\n      theme: theme\n    });\n  }\n\n  var min = minDate && isValidDate(new Date(minDate)) ? moment(minDate, 'YYYY-MM-DD').toDate() : undefined;\n  var max = maxDate && isValidDate(new Date(maxDate)) ? moment(maxDate, 'YYYY-MM-DD').toDate() : undefined;\n  return React.createElement(View, {\n    style: {\n      height: height\n    }\n  }, showMonthTitle && React.createElement(MonthTitle, {\n    name: monthName,\n    theme: theme\n  }), React.createElement(Month, {\n    month: month,\n    year: year,\n    disabledDays: props.disabledDays,\n    disableOffsetDays: props.disableOffsetDays,\n    disableRange: props.disableRange,\n    startDate: props.startDate,\n    endDate: props.endDate,\n    firstDayMonday: props.firstDayMonday,\n    locale: props.locale,\n    maxDate: max,\n    minDate: min,\n    onPress: props.onPress,\n    renderDayContent: props.renderDayContent,\n    showWeekdays: props.showWeekdays,\n    theme: props.theme,\n    dayNames: props.dayNames\n  }));\n}, function (prevProps, nextProps) {\n  if (prevProps.disableRange !== nextProps.disableRange) {\n    return false;\n  }\n\n  if ((prevProps.index < prevProps.firstViewableIndex - prevProps.viewableRangeOffset || prevProps.index > prevProps.lastViewableIndex) && nextProps.index >= nextProps.firstViewableIndex && nextProps.index <= nextProps.lastViewableIndex) {\n    return false;\n  }\n\n  if ((!nextProps.dayNames || !nextProps.monthNames) && prevProps.locale !== nextProps.locale) {\n    return false;\n  }\n\n  var currentMonth = moment(nextProps.firstMonthToRender).add(nextProps.index, 'months');\n\n  if (prevProps.disableRange === nextProps.disableRange) {\n    if (nextProps.disableRange) {\n      if (prevProps.startDate !== nextProps.startDate) {\n        if (!prevProps.startDate && moment(nextProps.startDate).isSame(currentMonth, 'month')) {\n          return false;\n        }\n\n        if (prevProps.startDate && (moment(prevProps.startDate).isSame(currentMonth, 'month') || moment(nextProps.startDate).isSame(currentMonth, 'month'))) {\n          return false;\n        }\n      }\n    } else {\n      var startDateChanged = prevProps.startDate instanceof Date && nextProps.startDate instanceof Date && !isSameDate(prevProps.startDate, nextProps.startDate) || prevProps.startDate !== nextProps.startDate;\n      var endDateChanged = prevProps.endDate instanceof Date && nextProps.endDate instanceof Date && !isSameDate(prevProps.endDate, nextProps.endDate) || prevProps.endDate !== nextProps.endDate;\n\n      if (startDateChanged || endDateChanged) {\n        if (isMonthDrawn(currentMonth.year(), currentMonth.month(), prevProps.startDate, prevProps.endDate) !== isMonthDrawn(currentMonth.year(), currentMonth.month(), nextProps.startDate, nextProps.endDate) || prevProps.startDate instanceof Date && moment(prevProps.startDate).isSame(currentMonth, 'month') && (startDateChanged || endDateChanged) || nextProps.startDate instanceof Date && moment(nextProps.startDate).isSame(currentMonth, 'month') && startDateChanged || prevProps.endDate instanceof Date && moment(prevProps.endDate).isSame(currentMonth, 'month') && endDateChanged || nextProps.endDate instanceof Date && moment(nextProps.endDate).isSame(currentMonth, 'month') && endDateChanged) {\n          return false;\n        }\n      }\n    }\n  } else {\n    return false;\n  }\n\n  if (shouldRenderMonth(currentMonth, prevProps.minDate, nextProps.minDate) || shouldRenderMonth(currentMonth, prevProps.maxDate, nextProps.maxDate)) {\n    return false;\n  }\n\n  return true;\n});","map":{"version":3,"sources":["index.tsx"],"names":["SHOULD_NOT_UPDATE","EmptyMonth","props","height","justifyContent","alignItems","fontSize","fontWeight","MonthTitle","textAlign","paddingVertical","theme","index","MONTH_NAMES","Array","monthNames","getMonthNames","monthName","min","minDate","isValidDate","moment","max","maxDate","showMonthTitle","dayNames","prevProps","nextProps","currentMonth","startDateChanged","isSameDate","endDateChanged","isMonthDrawn","shouldRenderMonth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text } from 'react-native';\nimport { Month, MonthProps } from 'react-native-month';\nimport moment from 'moment';\nimport { isValidDate, getMonthNames, isSameDate } from '../../utils/date';\nimport { shouldRenderMonth, isMonthDrawn } from './utils';\nimport { ThemeType } from '../../types';\n\ninterface EmptyMonthProps {\n  height: number;\n  name: string;\n  theme: ThemeType;\n}\n\nconst SHOULD_NOT_UPDATE = true;\n\nconst EmptyMonth = React.memo<EmptyMonthProps>(\n  (props: EmptyMonthProps) => (\n    <View\n      style={[\n        {\n          height: props.height,\n          justifyContent: 'center',\n          alignItems: 'center',\n        },\n        props.theme.emptyMonthContainerStyle,\n      ]}\n    >\n      <Text\n        style={[\n          { fontSize: 25, fontWeight: '300' },\n          props.theme.emptyMonthTextStyle,\n        ]}\n        allowFontScaling={false}\n      >\n        {props.name}\n      </Text>\n    </View>\n  ),\n  () => SHOULD_NOT_UPDATE\n);\n\ninterface MonthTitleProps {\n  name: string;\n  theme: ThemeType;\n}\n\nconst MonthTitle = React.memo<MonthTitleProps>(\n  (props: MonthTitleProps) => (\n    <Text\n      allowFontScaling={false}\n      style={[\n        { textAlign: 'center', paddingVertical: 10 },\n        props.theme.monthTitleTextStyle,\n      ]}\n    >\n      {props.name}\n    </Text>\n  ),\n  () => SHOULD_NOT_UPDATE\n);\n\ninterface Props extends MonthProps {\n  monthNames: string[];\n  // eslint-disable-next-line react/no-unused-prop-types\n  firstMonthToRender: Date;\n  firstViewableIndex: number;\n  lastViewableIndex: number;\n  viewableRangeOffset: number;\n  showMonthTitle: boolean;\n  height: number;\n  index: number;\n}\n\nexport default React.memo<Props>(\n  (props: Props) => {\n    const {\n      month,\n      year,\n      minDate,\n      maxDate,\n      showMonthTitle,\n      monthNames,\n      theme = {},\n      height,\n      locale,\n      index,\n    } = props;\n\n    const MONTH_NAMES =\n      Array.isArray(monthNames) && monthNames.length === 12\n        ? monthNames\n        : getMonthNames(locale);\n    const monthName = `${MONTH_NAMES[month]} ${year}`;\n\n    if (\n      index < props.firstViewableIndex - props.viewableRangeOffset ||\n      index > props.lastViewableIndex\n    ) {\n      return <EmptyMonth name={monthName} height={height} theme={theme} />;\n    }\n\n    const min =\n      minDate && isValidDate(new Date(minDate))\n        ? moment(minDate, 'YYYY-MM-DD').toDate()\n        : undefined;\n    const max =\n      maxDate && isValidDate(new Date(maxDate))\n        ? moment(maxDate, 'YYYY-MM-DD').toDate()\n        : undefined;\n\n    return (\n      <View style={{ height }}>\n        {showMonthTitle && <MonthTitle name={monthName} theme={theme} />}\n        <Month\n          month={month}\n          year={year}\n          disabledDays={props.disabledDays}\n          disableOffsetDays={props.disableOffsetDays}\n          disableRange={props.disableRange}\n          startDate={props.startDate}\n          endDate={props.endDate}\n          firstDayMonday={props.firstDayMonday}\n          locale={props.locale}\n          maxDate={max}\n          minDate={min}\n          onPress={props.onPress}\n          renderDayContent={props.renderDayContent}\n          showWeekdays={props.showWeekdays}\n          theme={props.theme}\n          dayNames={props.dayNames}\n        />\n      </View>\n    );\n  },\n  (prevProps: Props, nextProps: Props) => {\n    if (prevProps.disableRange !== nextProps.disableRange) {\n      return false;\n    }\n\n    if (\n      (prevProps.index <\n        prevProps.firstViewableIndex - prevProps.viewableRangeOffset ||\n        prevProps.index > prevProps.lastViewableIndex) &&\n      nextProps.index >= nextProps.firstViewableIndex &&\n      nextProps.index <= nextProps.lastViewableIndex\n    ) {\n      return false;\n    }\n\n    if (\n      (!nextProps.dayNames || !nextProps.monthNames) &&\n      prevProps.locale !== nextProps.locale\n    ) {\n      return false;\n    }\n\n    const currentMonth = moment(nextProps.firstMonthToRender).add(\n      nextProps.index,\n      'months'\n    );\n\n    if (prevProps.disableRange === nextProps.disableRange) {\n      if (nextProps.disableRange) {\n        if (prevProps.startDate !== nextProps.startDate) {\n          if (\n            !prevProps.startDate &&\n            moment(nextProps.startDate).isSame(currentMonth, 'month')\n          ) {\n            return false;\n          }\n\n          if (\n            prevProps.startDate &&\n            (moment(prevProps.startDate).isSame(currentMonth, 'month') ||\n              moment(nextProps.startDate).isSame(currentMonth, 'month'))\n          ) {\n            return false;\n          }\n        }\n      } else {\n        const startDateChanged =\n          (prevProps.startDate instanceof Date &&\n            nextProps.startDate instanceof Date &&\n            !isSameDate(prevProps.startDate, nextProps.startDate)) ||\n          prevProps.startDate !== nextProps.startDate;\n        const endDateChanged =\n          (prevProps.endDate instanceof Date &&\n            nextProps.endDate instanceof Date &&\n            !isSameDate(prevProps.endDate, nextProps.endDate)) ||\n          prevProps.endDate !== nextProps.endDate;\n\n        if (startDateChanged || endDateChanged) {\n          if (\n            isMonthDrawn(\n              currentMonth.year(),\n              currentMonth.month(),\n              prevProps.startDate,\n              prevProps.endDate\n            ) !==\n              isMonthDrawn(\n                currentMonth.year(),\n                currentMonth.month(),\n                nextProps.startDate,\n                nextProps.endDate\n              ) ||\n            (prevProps.startDate instanceof Date &&\n              moment(prevProps.startDate).isSame(currentMonth, 'month') &&\n              (startDateChanged || endDateChanged)) ||\n            (nextProps.startDate instanceof Date &&\n              moment(nextProps.startDate).isSame(currentMonth, 'month') &&\n              startDateChanged) ||\n            (prevProps.endDate instanceof Date &&\n              moment(prevProps.endDate).isSame(currentMonth, 'month') &&\n              endDateChanged) ||\n            (nextProps.endDate instanceof Date &&\n              moment(nextProps.endDate).isSame(currentMonth, 'month') &&\n              endDateChanged)\n          ) {\n            return false;\n          }\n        }\n      }\n    } else {\n      return false;\n    }\n\n    if (\n      shouldRenderMonth(currentMonth, prevProps.minDate, nextProps.minDate) ||\n      shouldRenderMonth(currentMonth, prevProps.maxDate, nextProps.maxDate)\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n);\n"]},"metadata":{},"sourceType":"module"}