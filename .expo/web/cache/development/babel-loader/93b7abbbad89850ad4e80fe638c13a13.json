{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMonthDays = getMonthDays;\nexports.areEqual = areEqual;\n\nvar _date = require(\"../utils/date\");\n\nvar _validations = require(\"../utils/validations\");\n\nvar MONDAY_FIRST = [6, 0, 1, 2, 3, 4, 5];\n\nfunction dayShouldBeActive(date, startDate, endDate, firstDayOfMonth, lastDayOfMonth) {\n  if (date > lastDayOfMonth) {\n    return endDate > lastDayOfMonth && startDate <= lastDayOfMonth;\n  }\n\n  return startDate < firstDayOfMonth && endDate >= firstDayOfMonth;\n}\n\nfunction getMonthDays(month, year, firstDayMonday, disableRange, disabledDays, disableOffsetDays, startDate, endDate, minDate, maxDate) {\n  if (minDate instanceof Date) minDate.setHours(0, 0, 0, 0);\n  if (maxDate instanceof Date) maxDate.setHours(0, 0, 0, 0);\n  if (startDate instanceof Date) startDate.setHours(0, 0, 0, 0);\n  if (endDate instanceof Date) endDate.setHours(0, 0, 0, 0);\n  var firstMonthDay = new Date(year, month, 1);\n  var lastMonthDay = new Date(year, month + 1, 0);\n  var daysToAdd = (0, _date.getNumberOfDaysInMonth)(month, year);\n  var days = [];\n  var startWeekOffset = firstDayMonday ? MONDAY_FIRST[firstMonthDay.getDay()] : firstMonthDay.getDay();\n  var daysToCompleteRows = (startWeekOffset + daysToAdd) % 7;\n  var lastRowNextMonthDays = daysToCompleteRows ? 7 - daysToCompleteRows : 0;\n\n  for (var i = -startWeekOffset; i < daysToAdd + lastRowNextMonthDays; i++) {\n    var date = (0, _date.addDays)(firstMonthDay, i);\n    var day = date.getDate();\n\n    var _month = date.getMonth();\n\n    var fullDay = day < 10 ? \"0\".concat(day) : day.toString();\n    var fullMonth = _month < 10 ? \"0\".concat(_month + 1) : (_month + 1).toString();\n    var id = \"\".concat(date.getFullYear(), \"-\").concat(fullMonth, \"-\").concat(fullDay);\n    var isOnSelectableRange = !minDate && !maxDate;\n    isOnSelectableRange = (!minDate || minDate && date >= minDate) && (!maxDate || maxDate && date <= maxDate);\n    var isOutOfRange = !!(minDate && date < minDate || maxDate && date > maxDate);\n    var isMonthDate = i >= 0 && i < daysToAdd;\n    var isStartDate = false;\n    var isEndDate = false;\n    var isActive = false;\n\n    if (endDate && startDate && !disableRange) {\n      isStartDate = isMonthDate && (0, _validations.sameDate)(date, startDate);\n      isEndDate = isMonthDate && (0, _validations.sameDate)(date, endDate);\n\n      if (!isMonthDate) {\n        isActive = dayShouldBeActive(date, startDate, endDate, firstMonthDay, lastMonthDay);\n      } else {\n        isActive = date >= startDate && date <= endDate;\n      }\n    } else if (isMonthDate && startDate && (0, _validations.sameDate)(date, startDate)) {\n      isStartDate = true;\n      isEndDate = true;\n      isActive = true;\n    }\n\n    var today = new Date();\n    var isToday = day === today.getDate() && _month === today.getMonth() && year === today.getFullYear();\n    days.push({\n      id: \"\".concat(_month, \"-\").concat(id),\n      date: date,\n      isToday: isToday,\n      isMonthDate: isMonthDate,\n      isActive: isActive,\n      isStartDate: isStartDate,\n      isEndDate: isEndDate,\n      isOutOfRange: isOutOfRange,\n      isVisible: isOnSelectableRange && isMonthDate && !disabledDays[\"\".concat(year, \"-\").concat(fullMonth, \"-\").concat(day)],\n      isHidden: disableOffsetDays && !isMonthDate\n    });\n  }\n\n  return days;\n}\n\nfunction areEqual(prevProps, nextProps) {\n  return prevProps.month === nextProps.month && prevProps.year === nextProps.year && prevProps.locale === nextProps.locale && Array.isArray(prevProps.dayNames) === Array.isArray(nextProps.dayNames) && prevProps.showWeekdays === nextProps.showWeekdays && prevProps.disableRange === nextProps.disableRange && prevProps.disableOffsetDays === nextProps.disableOffsetDays && prevProps.firstDayMonday === nextProps.firstDayMonday && !(0, _validations.changedDate)(prevProps.startDate, nextProps.startDate) && !(0, _validations.changedDate)(prevProps.endDate, nextProps.endDate) && !(0, _validations.changedDate)(prevProps.minDate, nextProps.minDate) && !(0, _validations.changedDate)(prevProps.maxDate, nextProps.maxDate);\n}","map":{"version":3,"sources":["utils.tsx"],"names":["MONDAY_FIRST","date","endDate","startDate","minDate","maxDate","firstMonthDay","lastMonthDay","month","daysToAdd","days","startWeekOffset","firstDayMonday","daysToCompleteRows","lastRowNextMonthDays","i","day","fullDay","fullMonth","id","isOnSelectableRange","isOutOfRange","isMonthDate","isStartDate","isEndDate","isActive","dayShouldBeActive","today","isToday","year","isVisible","disabledDays","isHidden","disableOffsetDays","prevProps","nextProps","Array"],"mappings":"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","sourcesContent":["import { addDays, getNumberOfDaysInMonth } from '../utils/date';\nimport { changedDate, sameDate } from '../utils/validations';\nimport { MonthProps, DayType } from '../types';\n\nconst MONDAY_FIRST = [6, 0, 1, 2, 3, 4, 5];\n\nfunction dayShouldBeActive(\n  date: Date,\n  startDate: Date,\n  endDate: Date,\n  firstDayOfMonth: Date,\n  lastDayOfMonth: Date\n) {\n  if (date > lastDayOfMonth) {\n    return endDate > lastDayOfMonth && startDate <= lastDayOfMonth;\n  }\n\n  return startDate < firstDayOfMonth && endDate >= firstDayOfMonth;\n}\n\nexport function getMonthDays(\n  month: number,\n  year: number,\n  firstDayMonday: boolean,\n  disableRange: boolean,\n  disabledDays: { [key: string]: any },\n  disableOffsetDays: boolean,\n  startDate?: Date,\n  endDate?: Date,\n  minDate?: Date,\n  maxDate?: Date\n): DayType[] {\n  if (minDate instanceof Date) minDate.setHours(0, 0, 0, 0);\n  if (maxDate instanceof Date) maxDate.setHours(0, 0, 0, 0);\n  if (startDate instanceof Date) startDate.setHours(0, 0, 0, 0);\n  if (endDate instanceof Date) endDate.setHours(0, 0, 0, 0);\n\n  const firstMonthDay = new Date(year, month, 1);\n  const lastMonthDay = new Date(year, month + 1, 0);\n\n  const daysToAdd = getNumberOfDaysInMonth(month, year);\n  const days: DayType[] = [];\n\n  const startWeekOffset = firstDayMonday\n    ? MONDAY_FIRST[firstMonthDay.getDay()]\n    : firstMonthDay.getDay();\n  const daysToCompleteRows = (startWeekOffset + daysToAdd) % 7;\n  const lastRowNextMonthDays = daysToCompleteRows ? 7 - daysToCompleteRows : 0;\n\n  for (let i = -startWeekOffset; i < daysToAdd + lastRowNextMonthDays; i++) {\n    const date: Date = addDays(firstMonthDay, i);\n    const day = date.getDate();\n    const month = date.getMonth();\n    const fullDay = day < 10 ? `0${day}` : day.toString();\n    const fullMonth = month < 10 ? `0${month + 1}` : (month + 1).toString();\n    const id = `${date.getFullYear()}-${fullMonth}-${fullDay}`;\n\n    let isOnSelectableRange = !minDate && !maxDate;\n\n    isOnSelectableRange =\n      (!minDate || (minDate && date >= minDate)) &&\n      (!maxDate || (maxDate && date <= maxDate));\n\n    const isOutOfRange = !!(\n      (minDate && date < minDate) ||\n      (maxDate && date > maxDate)\n    );\n    const isMonthDate = i >= 0 && i < daysToAdd;\n    let isStartDate = false;\n    let isEndDate = false;\n    let isActive = false;\n\n    if (endDate && startDate && !disableRange) {\n      isStartDate = isMonthDate && sameDate(date, startDate);\n      isEndDate = isMonthDate && sameDate(date, endDate);\n\n      if (!isMonthDate) {\n        isActive = dayShouldBeActive(\n          date,\n          startDate,\n          endDate,\n          firstMonthDay,\n          lastMonthDay\n        );\n      } else {\n        isActive = date >= startDate && date <= endDate;\n      }\n    } else if (isMonthDate && startDate && sameDate(date, startDate)) {\n      isStartDate = true;\n      isEndDate = true;\n      isActive = true;\n    }\n\n    const today = new Date();\n    const isToday =\n      day === today.getDate() &&\n      month === today.getMonth() &&\n      year === today.getFullYear();\n\n    days.push({\n      id: `${month}-${id}`,\n      date,\n      isToday,\n      isMonthDate,\n      isActive,\n      isStartDate,\n      isEndDate,\n      isOutOfRange,\n      isVisible:\n        isOnSelectableRange &&\n        isMonthDate &&\n        !disabledDays[`${year}-${fullMonth}-${day}`],\n      isHidden: disableOffsetDays && !isMonthDate,\n    });\n  }\n\n  return days;\n}\n\nexport function areEqual(prevProps: MonthProps, nextProps: MonthProps) {\n  return (\n    prevProps.month === nextProps.month &&\n    prevProps.year === nextProps.year &&\n    prevProps.locale === nextProps.locale &&\n    Array.isArray(prevProps.dayNames) === Array.isArray(nextProps.dayNames) &&\n    prevProps.showWeekdays === nextProps.showWeekdays &&\n    prevProps.disableRange === nextProps.disableRange &&\n    prevProps.disableOffsetDays === nextProps.disableOffsetDays &&\n    prevProps.firstDayMonday === nextProps.firstDayMonday &&\n    !changedDate(prevProps.startDate, nextProps.startDate) &&\n    !changedDate(prevProps.endDate, nextProps.endDate) &&\n    !changedDate(prevProps.minDate, nextProps.minDate) &&\n    !changedDate(prevProps.maxDate, nextProps.maxDate)\n  );\n}\n"]},"metadata":{},"sourceType":"script"}